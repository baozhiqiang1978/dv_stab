
/*
   THIS FILE IS AUTO GENERATED BY
   THE 'gen_bram_array.py' SCRIPT
   IN THE 'scripts' DIRECTORY.  

   DO NOT EDIT BY HAND!
*/



/*
    This is the array of brams used to store the
    gray-coded bit-plane sub images.  One image
    is stored in each bram.

    READING:
    Since the same data is being read from each
    bram (i.e. the same line number is read from
    each bram, and processed in parrallel by the
    motion correlator.

    Therefore, we only need one common read address 
    bus for all the brams, with unique data out
    buses.

    WRITING:
    Since each line of each subimage is written
    individually, we can use a single shared
    write address bus, and a single shared write
    data bus.  Which bram is actually written is
    controlled by the '1 hot' encoded write 
    enable signal.
*/



module bram_array(
	clk_write,
	clk_read,

	bram_write_addr,
	bram_write_data,
	bram_write_enable,

	bram_read_addr,
	bram_read_data_0,
	bram_read_data_1,
	bram_read_data_2,
	bram_read_data_3,
	bram_read_data_4,
	bram_read_data_5,
	bram_read_data_6,
	bram_read_data_7,
	bram_read_data_8,
	bram_read_data_9,
	bram_read_data_10,
	bram_read_data_11,
	bram_read_data_12,
	bram_read_data_13,
	bram_read_data_14,
	bram_read_data_15
	);

	// Clocks
	input  clk_write;
	input  clk_read;
	
	// Write I/Os
	input   [  8:0]  bram_write_addr;
	input   [127:0]  bram_write_data;
	input  [ 15:0]  bram_write_enable;
	
	// Read I/Os
	input   [  8:0]  bram_read_addr;
	output   [127:0]  bram_read_data_0;
	output   [127:0]  bram_read_data_1;
	output   [127:0]  bram_read_data_2;
	output   [127:0]  bram_read_data_3;
	output   [127:0]  bram_read_data_4;
	output   [127:0]  bram_read_data_5;
	output   [127:0]  bram_read_data_6;
	output   [127:0]  bram_read_data_7;
	output   [127:0]  bram_read_data_8;
	output   [127:0]  bram_read_data_9;
	output   [127:0]  bram_read_data_10;
	output   [127:0]  bram_read_data_11;
	output   [127:0]  bram_read_data_12;
	output   [127:0]  bram_read_data_13;
	output   [127:0]  bram_read_data_14;
	output   [127:0]  bram_read_data_15;

	bram bram_0(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_0),
		.wea  	(bram_write_enable[0])
	);

	bram bram_1(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_1),
		.wea  	(bram_write_enable[1])
	);

	bram bram_2(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_2),
		.wea  	(bram_write_enable[2])
	);

	bram bram_3(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_3),
		.wea  	(bram_write_enable[3])
	);

	bram bram_4(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_4),
		.wea  	(bram_write_enable[4])
	);

	bram bram_5(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_5),
		.wea  	(bram_write_enable[5])
	);

	bram bram_6(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_6),
		.wea  	(bram_write_enable[6])
	);

	bram bram_7(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_7),
		.wea  	(bram_write_enable[7])
	);

	bram bram_8(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_8),
		.wea  	(bram_write_enable[8])
	);

	bram bram_9(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_9),
		.wea  	(bram_write_enable[9])
	);

	bram bram_10(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_10),
		.wea  	(bram_write_enable[10])
	);

	bram bram_11(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_11),
		.wea  	(bram_write_enable[11])
	);
	bram bram_12(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_12),
		.wea  	(bram_write_enable[12])
	);

/*
	bram bram_13(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_13),
		.wea  	(bram_write_enable[13])
	);

	bram bram_14(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_14),
		.wea  	(bram_write_enable[14])
	);

	bram bram_15(
		.addra	(bram_write_addr),
		.addrb	(bram_read_addr),
		.clka 	(clk_write),
		.clkb 	(clk_read),
		.dina 	(bram_write_data),
		.doutb	(bram_read_data_15),
		.wea  	(bram_write_enable[15])
	);
*/
endmodule
